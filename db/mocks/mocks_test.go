// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package db

import (
	"context"
	"simple_bank/db/sqlc"

	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// AddAccountBalance provides a mock function for the type MockQuerier
func (_mock *MockQuerier) AddAccountBalance(ctx context.Context, arg db.AddAccountBalanceParams) (db.Account, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddAccountBalance")
	}

	var r0 db.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddAccountBalanceParams) (db.Account, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddAccountBalanceParams) db.Account); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.AddAccountBalanceParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_AddAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccountBalance'
type MockQuerier_AddAccountBalance_Call struct {
	*mock.Call
}

// AddAccountBalance is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) AddAccountBalance(ctx interface{}, arg interface{}) *MockQuerier_AddAccountBalance_Call {
	return &MockQuerier_AddAccountBalance_Call{Call: _e.mock.On("AddAccountBalance", ctx, arg)}
}

func (_c *MockQuerier_AddAccountBalance_Call) Run(run func(ctx context.Context, arg db.AddAccountBalanceParams)) *MockQuerier_AddAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddAccountBalanceParams))
	})
	return _c
}

func (_c *MockQuerier_AddAccountBalance_Call) Return(account db.Account, err error) *MockQuerier_AddAccountBalance_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockQuerier_AddAccountBalance_Call) RunAndReturn(run func(ctx context.Context, arg db.AddAccountBalanceParams) (db.Account, error)) *MockQuerier_AddAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Account, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 db.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateAccountParams) (db.Account, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateAccountParams) db.Account); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateAccountParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockQuerier_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateAccount(ctx interface{}, arg interface{}) *MockQuerier_CreateAccount_Call {
	return &MockQuerier_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, arg)}
}

func (_c *MockQuerier_CreateAccount_Call) Run(run func(ctx context.Context, arg db.CreateAccountParams)) *MockQuerier_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateAccountParams))
	})
	return _c
}

func (_c *MockQuerier_CreateAccount_Call) Return(account db.Account, err error) *MockQuerier_CreateAccount_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockQuerier_CreateAccount_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateAccountParams) (db.Account, error)) *MockQuerier_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEntry provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateEntry(ctx context.Context, arg db.CreateEntryParams) (db.Entry, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEntry")
	}

	var r0 db.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateEntryParams) (db.Entry, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateEntryParams) db.Entry); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Entry)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateEntryParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEntry'
type MockQuerier_CreateEntry_Call struct {
	*mock.Call
}

// CreateEntry is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateEntry(ctx interface{}, arg interface{}) *MockQuerier_CreateEntry_Call {
	return &MockQuerier_CreateEntry_Call{Call: _e.mock.On("CreateEntry", ctx, arg)}
}

func (_c *MockQuerier_CreateEntry_Call) Run(run func(ctx context.Context, arg db.CreateEntryParams)) *MockQuerier_CreateEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateEntryParams))
	})
	return _c
}

func (_c *MockQuerier_CreateEntry_Call) Return(entry db.Entry, err error) *MockQuerier_CreateEntry_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *MockQuerier_CreateEntry_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateEntryParams) (db.Entry, error)) *MockQuerier_CreateEntry_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransfer provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateTransfer(ctx context.Context, arg db.CreateTransferParams) (db.Transfer, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 db.Transfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) (db.Transfer, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) db.Transfer); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateTransferParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransfer'
type MockQuerier_CreateTransfer_Call struct {
	*mock.Call
}

// CreateTransfer is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateTransfer(ctx interface{}, arg interface{}) *MockQuerier_CreateTransfer_Call {
	return &MockQuerier_CreateTransfer_Call{Call: _e.mock.On("CreateTransfer", ctx, arg)}
}

func (_c *MockQuerier_CreateTransfer_Call) Run(run func(ctx context.Context, arg db.CreateTransferParams)) *MockQuerier_CreateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateTransferParams))
	})
	return _c
}

func (_c *MockQuerier_CreateTransfer_Call) Return(transfer db.Transfer, err error) *MockQuerier_CreateTransfer_Call {
	_c.Call.Return(transfer, err)
	return _c
}

func (_c *MockQuerier_CreateTransfer_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateTransferParams) (db.Transfer, error)) *MockQuerier_CreateTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteAccount(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockQuerier_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteAccount(ctx interface{}, id interface{}) *MockQuerier_DeleteAccount_Call {
	return &MockQuerier_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", ctx, id)}
}

func (_c *MockQuerier_DeleteAccount_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_DeleteAccount_Call) Return(err error) *MockQuerier_DeleteAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteAccount_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockQuerier_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetAccount(ctx context.Context, id int64) (db.Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 db.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (db.Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockQuerier_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetAccount(ctx interface{}, id interface{}) *MockQuerier_GetAccount_Call {
	return &MockQuerier_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *MockQuerier_GetAccount_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetAccount_Call) Return(account db.Account, err error) *MockQuerier_GetAccount_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockQuerier_GetAccount_Call) RunAndReturn(run func(ctx context.Context, id int64) (db.Account, error)) *MockQuerier_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountForUpdate provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetAccountForUpdate(ctx context.Context, id int64) (db.Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountForUpdate")
	}

	var r0 db.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (db.Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetAccountForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountForUpdate'
type MockQuerier_GetAccountForUpdate_Call struct {
	*mock.Call
}

// GetAccountForUpdate is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetAccountForUpdate(ctx interface{}, id interface{}) *MockQuerier_GetAccountForUpdate_Call {
	return &MockQuerier_GetAccountForUpdate_Call{Call: _e.mock.On("GetAccountForUpdate", ctx, id)}
}

func (_c *MockQuerier_GetAccountForUpdate_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_GetAccountForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetAccountForUpdate_Call) Return(account db.Account, err error) *MockQuerier_GetAccountForUpdate_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockQuerier_GetAccountForUpdate_Call) RunAndReturn(run func(ctx context.Context, id int64) (db.Account, error)) *MockQuerier_GetAccountForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntries provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetEntries(ctx context.Context, arg db.GetEntriesParams) ([]db.Entry, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetEntries")
	}

	var r0 []db.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetEntriesParams) ([]db.Entry, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetEntriesParams) []db.Entry); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Entry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetEntriesParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntries'
type MockQuerier_GetEntries_Call struct {
	*mock.Call
}

// GetEntries is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) GetEntries(ctx interface{}, arg interface{}) *MockQuerier_GetEntries_Call {
	return &MockQuerier_GetEntries_Call{Call: _e.mock.On("GetEntries", ctx, arg)}
}

func (_c *MockQuerier_GetEntries_Call) Run(run func(ctx context.Context, arg db.GetEntriesParams)) *MockQuerier_GetEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetEntriesParams))
	})
	return _c
}

func (_c *MockQuerier_GetEntries_Call) Return(entrys []db.Entry, err error) *MockQuerier_GetEntries_Call {
	_c.Call.Return(entrys, err)
	return _c
}

func (_c *MockQuerier_GetEntries_Call) RunAndReturn(run func(ctx context.Context, arg db.GetEntriesParams) ([]db.Entry, error)) *MockQuerier_GetEntries_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntry provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetEntry(ctx context.Context, id int64) (db.Entry, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEntry")
	}

	var r0 db.Entry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (db.Entry, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) db.Entry); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Entry)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type MockQuerier_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetEntry(ctx interface{}, id interface{}) *MockQuerier_GetEntry_Call {
	return &MockQuerier_GetEntry_Call{Call: _e.mock.On("GetEntry", ctx, id)}
}

func (_c *MockQuerier_GetEntry_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetEntry_Call) Return(entry db.Entry, err error) *MockQuerier_GetEntry_Call {
	_c.Call.Return(entry, err)
	return _c
}

func (_c *MockQuerier_GetEntry_Call) RunAndReturn(run func(ctx context.Context, id int64) (db.Entry, error)) *MockQuerier_GetEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransfer provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetTransfer(ctx context.Context, id int64) (db.Transfer, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransfer")
	}

	var r0 db.Transfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (db.Transfer, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) db.Transfer); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransfer'
type MockQuerier_GetTransfer_Call struct {
	*mock.Call
}

// GetTransfer is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetTransfer(ctx interface{}, id interface{}) *MockQuerier_GetTransfer_Call {
	return &MockQuerier_GetTransfer_Call{Call: _e.mock.On("GetTransfer", ctx, id)}
}

func (_c *MockQuerier_GetTransfer_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_GetTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetTransfer_Call) Return(transfer db.Transfer, err error) *MockQuerier_GetTransfer_Call {
	_c.Call.Return(transfer, err)
	return _c
}

func (_c *MockQuerier_GetTransfer_Call) RunAndReturn(run func(ctx context.Context, id int64) (db.Transfer, error)) *MockQuerier_GetTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransfers provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetTransfers(ctx context.Context, arg db.GetTransfersParams) ([]db.Transfer, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetTransfers")
	}

	var r0 []db.Transfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetTransfersParams) ([]db.Transfer, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetTransfersParams) []db.Transfer); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transfer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetTransfersParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetTransfers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransfers'
type MockQuerier_GetTransfers_Call struct {
	*mock.Call
}

// GetTransfers is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) GetTransfers(ctx interface{}, arg interface{}) *MockQuerier_GetTransfers_Call {
	return &MockQuerier_GetTransfers_Call{Call: _e.mock.On("GetTransfers", ctx, arg)}
}

func (_c *MockQuerier_GetTransfers_Call) Run(run func(ctx context.Context, arg db.GetTransfersParams)) *MockQuerier_GetTransfers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetTransfersParams))
	})
	return _c
}

func (_c *MockQuerier_GetTransfers_Call) Return(transfers []db.Transfer, err error) *MockQuerier_GetTransfers_Call {
	_c.Call.Return(transfers, err)
	return _c
}

func (_c *MockQuerier_GetTransfers_Call) RunAndReturn(run func(ctx context.Context, arg db.GetTransfersParams) ([]db.Transfer, error)) *MockQuerier_GetTransfers_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccount provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListAccount(ctx context.Context, arg db.ListAccountParams) ([]db.Account, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListAccount")
	}

	var r0 []db.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.ListAccountParams) ([]db.Account, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.ListAccountParams) []db.Account); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.ListAccountParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccount'
type MockQuerier_ListAccount_Call struct {
	*mock.Call
}

// ListAccount is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) ListAccount(ctx interface{}, arg interface{}) *MockQuerier_ListAccount_Call {
	return &MockQuerier_ListAccount_Call{Call: _e.mock.On("ListAccount", ctx, arg)}
}

func (_c *MockQuerier_ListAccount_Call) Run(run func(ctx context.Context, arg db.ListAccountParams)) *MockQuerier_ListAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListAccountParams))
	})
	return _c
}

func (_c *MockQuerier_ListAccount_Call) Return(accounts []db.Account, err error) *MockQuerier_ListAccount_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockQuerier_ListAccount_Call) RunAndReturn(run func(ctx context.Context, arg db.ListAccountParams) ([]db.Account, error)) *MockQuerier_ListAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateAccount(ctx context.Context, arg db.UpdateAccountParams) (db.Account, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 db.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateAccountParams) (db.Account, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateAccountParams) db.Account); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateAccountParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type MockQuerier_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateAccount(ctx interface{}, arg interface{}) *MockQuerier_UpdateAccount_Call {
	return &MockQuerier_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, arg)}
}

func (_c *MockQuerier_UpdateAccount_Call) Run(run func(ctx context.Context, arg db.UpdateAccountParams)) *MockQuerier_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateAccountParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateAccount_Call) Return(account db.Account, err error) *MockQuerier_UpdateAccount_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockQuerier_UpdateAccount_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateAccountParams) (db.Account, error)) *MockQuerier_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}
